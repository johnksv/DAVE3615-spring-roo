// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.s305089.bookstore.web;

import com.s305089.bookstore.Author;
import com.s305089.bookstore.Book;
import com.s305089.bookstore.Category;
import com.s305089.bookstore.web.BookController;
import java.util.Set;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect BookController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByAuthor", "form" }, method = RequestMethod.GET)
    public String BookController.findBooksByAuthorForm(Model uiModel) {
        uiModel.addAttribute("authors", Author.findAllAuthors());
        return "books/findBooksByAuthor";
    }
    
    @RequestMapping(params = "find=ByAuthor", method = RequestMethod.GET)
    public String BookController.findBooksByAuthor(@RequestParam("author") Author author, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("books", Book.findBooksByAuthor(author, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Book.countFindBooksByAuthor(author) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("books", Book.findBooksByAuthor(author, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "books/list";
    }
    
    @RequestMapping(params = { "find=ByCategory", "form" }, method = RequestMethod.GET)
    public String BookController.findBooksByCategoryForm(Model uiModel) {
        uiModel.addAttribute("categorys", Category.findAllCategorys());
        return "books/findBooksByCategory";
    }
    
    @RequestMapping(params = "find=ByCategory", method = RequestMethod.GET)
    public String BookController.findBooksByCategory(@RequestParam("category") Set<Category> category, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("books", Book.findBooksByCategory(category, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Book.countFindBooksByCategory(category) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("books", Book.findBooksByCategory(category, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "books/list";
    }
    
    @RequestMapping(params = { "find=ByIsbnEquals", "form" }, method = RequestMethod.GET)
    public String BookController.findBooksByIsbnEqualsForm(Model uiModel) {
        return "books/findBooksByIsbnEquals";
    }
    
    @RequestMapping(params = "find=ByIsbnEquals", method = RequestMethod.GET)
    public String BookController.findBooksByIsbnEquals(@RequestParam("isbn") String isbn, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("books", Book.findBooksByIsbnEquals(isbn, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Book.countFindBooksByIsbnEquals(isbn) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("books", Book.findBooksByIsbnEquals(isbn, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "books/list";
    }
    
    @RequestMapping(params = { "find=ByTitleEquals", "form" }, method = RequestMethod.GET)
    public String BookController.findBooksByTitleEqualsForm(Model uiModel) {
        return "books/findBooksByTitleEquals";
    }
    
    @RequestMapping(params = "find=ByTitleEquals", method = RequestMethod.GET)
    public String BookController.findBooksByTitleEquals(@RequestParam("title") String title, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("books", Book.findBooksByTitleEquals(title, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Book.countFindBooksByTitleEquals(title) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("books", Book.findBooksByTitleEquals(title, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "books/list";
    }
    
}
