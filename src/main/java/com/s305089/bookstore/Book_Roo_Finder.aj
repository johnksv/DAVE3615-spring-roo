// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.s305089.bookstore;

import com.s305089.bookstore.Author;
import com.s305089.bookstore.Book;
import com.s305089.bookstore.Category;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Book_Roo_Finder {
    
    public static Long Book.countFindBooksByAuthor(Author author) {
        if (author == null) throw new IllegalArgumentException("The author argument is required");
        EntityManager em = Book.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Book AS o WHERE o.author = :author", Long.class);
        q.setParameter("author", author);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Book.countFindBooksByCategory(Set<Category> category) {
        if (category == null) throw new IllegalArgumentException("The category argument is required");
        EntityManager em = Book.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Book AS o WHERE");
        for (int i = 0; i < category.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :category_item").append(i).append(" MEMBER OF o.category");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        int categoryIndex = 0;
        for (Category _category: category) {
            q.setParameter("category_item" + categoryIndex++, _category);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static Long Book.countFindBooksByIsbnEquals(String isbn) {
        if (isbn == null || isbn.length() == 0) throw new IllegalArgumentException("The isbn argument is required");
        EntityManager em = Book.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Book AS o WHERE o.isbn = :isbn", Long.class);
        q.setParameter("isbn", isbn);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Book.countFindBooksByTitleEquals(String title) {
        if (title == null || title.length() == 0) throw new IllegalArgumentException("The title argument is required");
        EntityManager em = Book.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Book AS o WHERE o.title = :title", Long.class);
        q.setParameter("title", title);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Book> Book.findBooksByAuthor(Author author) {
        if (author == null) throw new IllegalArgumentException("The author argument is required");
        EntityManager em = Book.entityManager();
        TypedQuery<Book> q = em.createQuery("SELECT o FROM Book AS o WHERE o.author = :author", Book.class);
        q.setParameter("author", author);
        return q;
    }
    
    public static TypedQuery<Book> Book.findBooksByAuthor(Author author, String sortFieldName, String sortOrder) {
        if (author == null) throw new IllegalArgumentException("The author argument is required");
        EntityManager em = Book.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Book AS o WHERE o.author = :author");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Book> q = em.createQuery(queryBuilder.toString(), Book.class);
        q.setParameter("author", author);
        return q;
    }
    
    public static TypedQuery<Book> Book.findBooksByCategory(Set<Category> category) {
        if (category == null) throw new IllegalArgumentException("The category argument is required");
        EntityManager em = Book.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Book AS o WHERE");
        for (int i = 0; i < category.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :category_item").append(i).append(" MEMBER OF o.category");
        }
        TypedQuery<Book> q = em.createQuery(queryBuilder.toString(), Book.class);
        int categoryIndex = 0;
        for (Category _category: category) {
            q.setParameter("category_item" + categoryIndex++, _category);
        }
        return q;
    }
    
    public static TypedQuery<Book> Book.findBooksByCategory(Set<Category> category, String sortFieldName, String sortOrder) {
        if (category == null) throw new IllegalArgumentException("The category argument is required");
        EntityManager em = Book.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Book AS o WHERE");
        for (int i = 0; i < category.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :category_item").append(i).append(" MEMBER OF o.category");
        }
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" " + sortOrder);
            }
        }
        TypedQuery<Book> q = em.createQuery(queryBuilder.toString(), Book.class);
        int categoryIndex = 0;
        for (Category _category: category) {
            q.setParameter("category_item" + categoryIndex++, _category);
        }
        return q;
    }
    
    public static TypedQuery<Book> Book.findBooksByIsbnEquals(String isbn) {
        if (isbn == null || isbn.length() == 0) throw new IllegalArgumentException("The isbn argument is required");
        EntityManager em = Book.entityManager();
        TypedQuery<Book> q = em.createQuery("SELECT o FROM Book AS o WHERE o.isbn = :isbn", Book.class);
        q.setParameter("isbn", isbn);
        return q;
    }
    
    public static TypedQuery<Book> Book.findBooksByIsbnEquals(String isbn, String sortFieldName, String sortOrder) {
        if (isbn == null || isbn.length() == 0) throw new IllegalArgumentException("The isbn argument is required");
        EntityManager em = Book.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Book AS o WHERE o.isbn = :isbn");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Book> q = em.createQuery(queryBuilder.toString(), Book.class);
        q.setParameter("isbn", isbn);
        return q;
    }
    
    public static TypedQuery<Book> Book.findBooksByTitleEquals(String title) {
        if (title == null || title.length() == 0) throw new IllegalArgumentException("The title argument is required");
        EntityManager em = Book.entityManager();
        TypedQuery<Book> q = em.createQuery("SELECT o FROM Book AS o WHERE o.title = :title", Book.class);
        q.setParameter("title", title);
        return q;
    }
    
    public static TypedQuery<Book> Book.findBooksByTitleEquals(String title, String sortFieldName, String sortOrder) {
        if (title == null || title.length() == 0) throw new IllegalArgumentException("The title argument is required");
        EntityManager em = Book.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Book AS o WHERE o.title = :title");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Book> q = em.createQuery(queryBuilder.toString(), Book.class);
        q.setParameter("title", title);
        return q;
    }
    
}
